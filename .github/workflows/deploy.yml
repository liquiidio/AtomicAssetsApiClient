name: Deploy

on: [push]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        dotnet-version: ['3.0', '3.1.x', '5.0.x', '6.0.x', '7.0.x']
    name: Build and test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: haron_branch_2
          fetch-depth: 0
      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --verbosity normal --logger trx --results-directory "TestResults"
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TestResults
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  pack:
    needs: build
    runs-on: ubuntu-20.04
    name: Dotnet Pack
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: haron_branch_2
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
      - name: Determine version
        run: echo "VERSION=$(git describe --tags --dirty)" >> $GITHUB_ENV
      - name: Pack
        run: dotnet pack --output ./artifacts --configuration Release -p:Version=1.0.14
      - name: Upload package
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: ./artifacts  
      
  release:
    runs-on: ubuntu-20.04
    needs: pack
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Determine version
        run: echo "VERSION=$(git describe --tags --dirty)" >> $GITHUB_ENV
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: 1.0.14
          name: Release 1.0.14
          body: ${{ env.VERSION }}
  
  github-publish:
    runs-on: ubuntu-20.04
    needs: release
    name: Publish to GitHub
    if: github.event_name == 'push'
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
      - name: Download package
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: ./artifacts
      - name: Push package to GitHub
        run: dotnet nuget push ./artifacts**.nupkg --api-key ${{secrets.GITHUB_TOKEN}} --source "https://nuget.pkg.github.com/liquiidio/index.json"

  nuget-publish:
    runs-on: ubuntu-20.04
    needs: release
    name: Publish to Nuget
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1.x
      - name: Download package
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: ./artifacts
      - name: Push package to Nuget
        run: dotnet nuget push ./artifacts**.nupkg --api-key ${{secrets.NUGET_KEY}} --source "https://api.nuget.org/v3/index.json"

  unityPackage-publish:
    runs-on: ubuntu-20.04
    needs: release
    name: Publish .unitypackage to GitHub
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: unity_develop
          fetch-depth: 0
      - name: Find all meta files
        run: |
          echo > metaList
          find -name \*.meta >> metaList
      - name: Make directory for our unity package
        run: mkdir a
      - name: Create Unity Package
        uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: 'a/atomicassets.unitypackage'
          include-files: metaList
      - name: Upload binaries to release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: a/atomicassets.unitypackage
  
  split-upm:
    runs-on: ubuntu-latest
    needs: release
    name: Split UPM branch
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: unity_develop
          fetch-depth: 0
      - name: split upm branch
        run: |
          git branch -d upm &> /dev/null || echo upm branch not found # recreate the upm branch each time
          echo "********************** ROOT **********************"
          ls
          git config --global user.name 'github-bot'
          git config --global user.email 'github-bot@users.noreply.github.com'
          git checkout -b upm                                               # create the upm branch and checkout the branch
          git rm -r .github                                                 # remove github workflow files
          git commit -am "initial commit"
          echo "********************** ROOT **********************"
          ls
          git push -u origin upm --force                                    # commit the branch


        